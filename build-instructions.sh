#!/bin/bash

# 🏗️ Instructions Build System
# 指示書ビルドシステム - ベース指示書と専門テンプレートを統合

set -e  # エラー時に停止

# 色付きログ関数
log_info() {
    echo -e "\033[1;32m[BUILD]\033[0m $1"
}

log_success() {
    echo -e "\033[1;34m[SUCCESS]\033[0m $1"
}

log_error() {
    echo -e "\033[1;31m[ERROR]\033[0m $1"
}

log_warn() {
    echo -e "\033[1;33m[WARN]\033[0m $1"
}

# 使用方法表示
usage() {
    echo "🏗️ Instructions Build System"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --clean      ビルド済みファイルをクリーンアップ"
    echo "  --watch      ファイル変更を監視して自動ビルド"
    echo "  --help       このヘルプを表示"
    echo ""
    echo "ディレクトリ構造:"
    echo "  instructions-src/     ソースファイル"
    echo "  ├── base/            ベース指示書"
    echo "  └── templates/       専門テンプレート"
    echo ""
    echo "  instructions-built/   ビルド済みファイル"
    echo "  ├── teams/           チーム別指示書"
    echo "  └── roles/           役割別指示書"
    echo ""
    echo "Example:"
    echo "  $0                   # 全指示書をビルド"
    echo "  $0 --clean           # クリーンアップ"
    echo "  $0 --watch           # 監視モード"
    exit 1
}

# 必要なツールの確認
check_dependencies() {
    if ! command -v jq &> /dev/null; then
        log_error "jqがインストールされていません。先にインストールしてください。"
        echo "Mac: brew install jq"
        echo "Linux: sudo apt-get install jq"
        exit 1
    fi
}

# クリーンアップ
clean_build() {
    log_info "🧹 ビルド済みファイルをクリーンアップ中..."
    rm -rf instructions-built
    mkdir -p instructions-built/{teams,roles}
    log_success "✅ クリーンアップ完了"
}

# 指示書統合関数
merge_instructions() {
    local base_file="$1"
    local specialty_file="$2"
    local output_file="$3"
    local role_name="$4"
    local manager_name="$5"
    local worker_name="$6"
    
    # 出力ディレクトリを作成
    mkdir -p "$(dirname "$output_file")"
    
    if [ -f "$base_file" ] && [ -f "$specialty_file" ]; then
        log_info "統合中: $(basename "$base_file") + $(basename "$specialty_file") → $(basename "$output_file")"
        
        # ベース指示書をコピーして役職名を置換
        sed "s/\[リーダー役職\]/$role_name/g; s/\[マネージャー役職\]/$manager_name/g; s/\[ワーカー役職\]/$worker_name/g; s/\[デフォルトマネージャー名\]/boss1/g" "$base_file" > "$output_file"
        
        # 専門指示書の内容を追加（ヘッダーは除く）
        echo "" >> "$output_file"
        echo "---" >> "$output_file"
        echo "" >> "$output_file"
        tail -n +2 "$specialty_file" >> "$output_file"
        
    elif [ -f "$specialty_file" ]; then
        log_warn "ベース指示書が見つかりません: $base_file"
        log_info "専門指示書のみコピー: $(basename "$specialty_file") → $(basename "$output_file")"
        cp "$specialty_file" "$output_file"
        
    elif [ -f "$base_file" ]; then
        log_warn "専門指示書が見つかりません: $specialty_file"
        log_info "ベース指示書のみコピー: $(basename "$base_file") → $(basename "$output_file")"
        sed "s/\[リーダー役職\]/$role_name/g; s/\[マネージャー役職\]/$manager_name/g; s/\[ワーカー役職\]/$worker_name/g; s/\[デフォルトマネージャー名\]/boss1/g" "$base_file" > "$output_file"
        
    else
        log_error "指示書ファイルが見つかりません: $base_file, $specialty_file"
        return 1
    fi
    
    # ビルド情報をヘッダーに追加
    add_build_header "$output_file" "$base_file" "$specialty_file"
}

# ビルド情報ヘッダーの追加
add_build_header() {
    local output_file="$1"
    local base_file="$2"
    local specialty_file="$3"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # 一時ファイルに既存内容を保存
    local temp_file=$(mktemp)
    cat "$output_file" > "$temp_file"
    
    # ヘッダー付きで書き直し
    cat > "$output_file" << EOF
<!-- 
🏗️ AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
Generated by: build-instructions.sh
Build time: $timestamp
Base file: $base_file
Specialty file: $specialty_file
-->

EOF
    
    cat "$temp_file" >> "$output_file"
    rm "$temp_file"
}

# 役割別指示書のビルド
build_role_instructions() {
    log_info "📝 役割別指示書をビルド中..."
    
    local roles_file="./team-roles.json"
    if [ ! -f "$roles_file" ]; then
        log_error "team-roles.jsonが見つかりません"
        return 1
    fi
    
    # 各テンプレートを処理
    local templates=$(jq -r '.templates | keys[]' "$roles_file")
    
    for template in $templates; do
        log_info "🎯 テンプレート処理中: $template"
        
        local team_name=$(jq -r ".templates.\"$template\".name" "$roles_file")
        local leader_role=$(jq -r ".templates.\"$template\".leader.role" "$roles_file")
        local leader_instruction=$(jq -r ".templates.\"$template\".leader.instruction" "$roles_file")
        local manager_role=$(jq -r ".templates.\"$template\".manager.role" "$roles_file")
        local manager_instruction=$(jq -r ".templates.\"$template\".manager.instruction" "$roles_file")
        
        # テンプレート用ディレクトリ作成
        mkdir -p "instructions-built/teams/$template"
        
        # リーダー指示書の統合
        merge_instructions \
            "./instructions-src/base/leader.md" \
            "./instructions-src/templates/$leader_instruction" \
            "./instructions-built/teams/$template/${leader_role}.md" \
            "$leader_role" \
            "$manager_role" \
            "$(jq -r ".templates.\"$template\".workers[0].role" "$roles_file")"
        
        # マネージャー指示書の統合
        merge_instructions \
            "./instructions-src/base/manager.md" \
            "./instructions-src/templates/$manager_instruction" \
            "./instructions-built/teams/$template/${manager_role}.md" \
            "$leader_role" \
            "$manager_role" \
            "$(jq -r ".templates.\"$template\".workers[0].role" "$roles_file")"
        
        # ワーカー指示書の統合
        local worker_count=$(jq -r ".templates.\"$template\".workers | length" "$roles_file")
        for ((i=0; i<$worker_count; i++)); do
            local worker_role=$(jq -r ".templates.\"$template\".workers[$i].role" "$roles_file")
            local worker_instruction=$(jq -r ".templates.\"$template\".workers[$i].instruction" "$roles_file")
            
            merge_instructions \
                "./instructions-src/base/worker.md" \
                "./instructions-src/templates/$worker_instruction" \
                "./instructions-built/teams/$template/${worker_role}.md" \
                "$leader_role" \
                "$manager_role" \
                "$worker_role"
        done
        
        log_success "✅ $template ($team_name) 完了"
    done
}

# 汎用役割指示書のビルド
build_generic_roles() {
    log_info "🎭 汎用役割指示書をビルド中..."
    
    # 汎用リーダー
    if [ -f "./instructions-src/base/leader.md" ]; then
        cp "./instructions-src/base/leader.md" "./instructions-built/roles/leader.md"
        add_build_header "./instructions-built/roles/leader.md" "./instructions-src/base/leader.md" "なし"
    fi
    
    # 汎用マネージャー
    if [ -f "./instructions-src/base/manager.md" ]; then
        cp "./instructions-src/base/manager.md" "./instructions-built/roles/manager.md"
        add_build_header "./instructions-built/roles/manager.md" "./instructions-src/base/manager.md" "なし"
    fi
    
    # 汎用ワーカー
    if [ -f "./instructions-src/base/worker.md" ]; then
        cp "./instructions-src/base/worker.md" "./instructions-built/roles/worker.md"
        add_build_header "./instructions-built/roles/worker.md" "./instructions-src/base/worker.md" "なし"
    fi
    
    log_success "✅ 汎用役割指示書完了"
}

# ビルド統計の表示
show_build_stats() {
    log_info "📊 ビルド統計:"
    echo ""
    echo "📁 ビルド済みファイル:"
    echo "  teams/    $(find instructions-built/teams -name "*.md" | wc -l) ファイル"
    echo "  roles/    $(find instructions-built/roles -name "*.md" | wc -l) ファイル"
    echo ""
    echo "📋 チーム別指示書:"
    for team_dir in instructions-built/teams/*/; do
        if [ -d "$team_dir" ]; then
            local team_name=$(basename "$team_dir")
            local file_count=$(find "$team_dir" -name "*.md" | wc -l)
            echo "  $team_name: $file_count ファイル"
        fi
    done
}

# ファイル監視モード
watch_mode() {
    log_info "👀 ファイル監視モード開始..."
    log_info "instructions-src/ の変更を監視しています..."
    log_info "Ctrl+C で終了"
    
    if command -v fswatch &> /dev/null; then
        fswatch -o instructions-src/ | while read f; do
            log_info "🔄 変更検知 - 自動ビルド開始"
            build_all
        done
    elif command -v inotifywait &> /dev/null; then
        while inotifywait -r -e modify,create,delete instructions-src/; do
            log_info "🔄 変更検知 - 自動ビルド開始"
            build_all
        done
    else
        log_error "ファイル監視ツールが見つかりません"
        log_info "Mac: brew install fswatch"
        log_info "Linux: sudo apt-get install inotify-tools"
        exit 1
    fi
}

# 全ビルド実行
build_all() {
    local start_time=$(date +%s)
    
    log_info "🏗️ 指示書ビルド開始..."
    echo ""
    
    # ビルドディレクトリの準備
    mkdir -p instructions-built/{teams,roles}
    
    # ビルド実行
    build_role_instructions
    echo ""
    build_generic_roles
    echo ""
    
    # 統計表示
    show_build_stats
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo ""
    log_success "🎉 ビルド完了！ (${duration}秒)"
}

# メイン処理
main() {
    echo "🏗️ Instructions Build System"
    echo "============================="
    echo ""
    
    # 依存関係チェック
    check_dependencies
    
    # オプション処理
    case "${1:-}" in
        "--clean")
            clean_build
            ;;
        "--watch")
            build_all
            echo ""
            watch_mode
            ;;
        "--help")
            usage
            ;;
        "")
            build_all
            ;;
        *)
            log_error "不明なオプション: $1"
            usage
            ;;
    esac
}

main "$@" 